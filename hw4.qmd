---
title: Homework 4
author: Catherine Cheu
date: February 17, 2023
---

1. Cross table analysis

```{python}
import numpy as np
import pandas as pd
import sqlite3 as sq
import gmplot
import plotnine as pn
from plotnine import ggplot, geom_histogram
from plotnine import aes

import scipy.stats as scistats
import datetime as dt
import statsmodels
import statsmodels.formula.api as sfa
import uszipcode as usz
from uszipcode import SearchEngine

dfnycraw = pd.read_csv("data/nyccrash_Jan2023.csv")

dfnycraw[["LATITUDE","LONGITUDE"]].replace(0.0, np.nan)

dfnycraw["MISSCO"] = ((dfnycraw["LATITUDE"] == dfnycraw["LONGITUDE"]) & (dfnycraw["BOROUGH"] != 'NaN')).astype(int)

cross = pd.crosstab(dfnycraw["BOROUGH"], dfnycraw["MISSCO"])

chi2, d, q, p = scistats.chi2_contingency(cross)

print(cross)

print("p-value: " + str(d))
```

Since the p-value is above 0.05, we fail to reject the null hypothesis that there is a relationship between the boroughs and the missing coordinates.

2. Histogram based on hour

```{python}
dfclean = pd.read_csv("clean.csv")
dfclean["Hour"] = pd.to_datetime(dfclean["CRASH TIME"], format = "%H:%M").dt.hour

ggplot(dfclean, aes(x = dfclean["Hour"], fill = dfclean["BOROUGH"].str.upper())) + geom_histogram(binwidth = 1)
```

3. Plot on NYC map

```{python}
lat = dfclean["LATITUDE"].dropna().values
long = dfclean["LONGITUDE"].dropna().values

gmap = gmplot.GoogleMapPlotter(40.769737, -73.91244, 14)
gmap.scatter(lat,long)

gmap.draw(r"nymap.html")
```

The output is on the nymap.html attached.

4. Cross with injuries.

```{python}
dfclean["Injury"] = np.where(dfclean["NUMBER OF PERSONS INJURED"] > 0, 1, 0)
itable = pd.crosstab(dfclean["Injury"], dfclean["BOROUGH"])
chi2, p, q, d = scistats.chi2_contingency(itable)
print(itable)
print("p-value: " + str(p))
```

Since the p-value is above 0.05, we fail to reject the null hypothesis that there is no relationship between the incidence of injury and the boroughs.

5. Merge with zip code database

```{python}
search = SearchEngine()
for index, row in enumerate(dfclean.itertuples(), 1):
	if pd.isna(dfclean.at[index, "ZIP CODE"]) == False:
		zr = search.by_zipcode(dfclean.at[index, "ZIP CODE"])
		dfclean.at[index, "POPULATION"] = zr[0].population
		dfclean.at[index, "HOUSE UNIT"] = zr[0].housing_units
```

6. Fit logistic regression

```{python}
dfclean['Count'] = dfclean["Injury"]
dfclean['x1'] = dfclean.groupby("BOROUGH").cumcount()
model = sfa.glm(formula = 'Count ~ x1', data = dfclean, family = statsmodels.genmod.families.Binomial())
fitl = model.fit()
fitl.summary()
```